package foundation;

import util.CryptoTools;
import util.MyTools;

import static util.MyTools.normalizeAndComputeDotProduct;

public class VigenereCryptanalytic {

    public static void main(String[] args) {
        // clean ciphertext
        String ct = "FHDGLDNNQGMMUQMERLOCKTNJKRRLPIAXASEVUFKBRTNJQBOBJBGGFFQBIKLIABRGOBOBJBYBZQBPCPBQAHOCMCIAEAYGATQGKPHWKXFPQHMPHWLZMLPZISKUCMDCEBIOEOFXXMZVAAALPBPEQIHHPARKQROWEZEVYGAPFWEHOBQHGRTLEZPLGKQAFXOUWVBAMQFLOMHIRMANEXTYEACLFMMBIUEUSFPCBIHVBUCMDCEUTADMKBPNMRIMEKKHGLFPIUOILWFFGHASOWFHDGLDNNQGMMXGQLEZPWDAMUMXIHJLLHDRTTAZPWDMTCXXNLEAJTZBEXTDWANKAZMQLFBWPFQBNNAOKBQIARNJTADMCOUBQCCLEAAHZDXXCAEVEOAJOPNPYIAMUTUIYVYKSKDCPSUYEVEMTCFJRVJQYGOCZDMHJQYGQPMHMPHTGHZWQPRZWOMTZBMCOADMPLFYSTHHOJCXZBMIEKPWFTHCARCBNZCWYGXAIVJGCTDQMVOIABUXQLFWEZADMEOYZXCLLQQHPCERAYXWLTFCPTPVOQRBALRGOTHIEHALMAAUZZCXRYXTNCEZMGYCZISZABGGMLPUOYIMBEUKQHTVJMTHXAMCIJEAJTZBESECATMIQBACHVNQXHZEGNOAWAUXXJMCDDAZCVAJACIZALZRBJMCTZDWPBLMZVUFKBZXOYYTAZAIKHGLFSUYEVEMTCODNPWKGTZAMBPHJQYGBCDXOKOQLVQRTTNWATYZUAADZLDIQTOAGBUSWBCWALFWEZAIKHGLFUOYIQLZMRTXCRHIWXDRTPTPONSKFFQGMVZQDBQBNNOJAILVGPDTNAOILWNWHPRPKCQHDEMCIZIARAMRXXVLKVRAQQQPMVQVRLQBUBEUPAYEEMGCDLNECGFJMCDZHQBBZERTRYKUYGSYZTSLYZSLFQITRLZMNHEGFTDVJMVIAQQSRVYSQVALFTNAOVYFQYZSRLOMYKOFTXSAKZWZQMSGAWDGYGPEQDLVCGJHOYXHEAPQLZDCSXOUWTQXFRUCGJKUNHEGFXOUCMMEAEURHPOBMKKTAACHJQQFOYDQOUWBCBEJMCDWDIQXMLPGEUAECWHMXRAUEAKWDMICIUCILWECPXMLJBYMUMZERLOMLMERMIELYWJHSWZDTLOZCYQPQCCLOAMNDAQHEEPMPGMJXXNROVYFQYZSRLOMYKOFTXSAKZWMTCETATKCLMUQZPMLZIDMQPFWEYAACTDATKEZOMJKHFAGIGKVYGPGEPLZKSLHILMHHVNQXHZPUSGLDWPBLMZIAIHMKHGLFVOYWSFHDYKONHJLBNDGZVTOALCXBQQPDYETJBZEBGOQAKRMTCPGISHKMKQQOPLSALQBFCMCDZEBCPQPQIARAVMGTMDXZVJOSRARUCAUZZCLBCOIICATWTRSDIHLNLPBXJODRLSIQHNRMXNLZVMKFFAUTOAACTYMGCTHPAGMQGZIHPOACTYMGCTPOBFXNCEISAQLGXPQQPMVQVRHRRTTMPZXYVUDURMVQVRTULEPNKIWPXUQWCODJIZHGRUISTKZNAAJAVYADILTFYZNOADMPLQYYDUUPWDMTCYXDWWKGYUAYDUUPIGGEEQDGYWXFRMLPVEVHWERXMOPLZABRBZETDRPVWLZGWAILPAAUXERAUHHSIGBMLPXSWWZRHRRTTMPZXYVUDURMVQVRTULEJNSESCVALHTNAEWLTXGEAAUZKFTULEXNADMNTOGRXCVYMYGFFQBIKLIABRGOBOBJBYBZQRTAAQZCTZMOTAUEKNEMRQPUDEBFZGWAISHHAMDZMICAZPIZEQKAJNAOBFTFZQROTAXPHSPQHSPRMJRKMGCGLNBMPMPPHTOAMYLFMFWEYCCWHFQUCTOAUGWBYOXFPYUMNZRMXNZWZCLUMEDUADLYKIGZIHVIIQAQCLTNHHTCGOYBGIUWRYVCSQAIUAIJEUQACAUZZCLAJGIIVJAMNFFAUHVNQXHZEGNOAZMCIIYFTRPJBFXTMDXZVJXYLEYSTLLWLQBZRAIHLHQLXUQXPNKOILWTMDXZVJOSRARUHSVIMRBYCEROUOQBXDCPIOIAIKXYZQGOMPPYMOFMXNADMQXMKAJNANQQXEIUAOTABPXEKUZISKUCMDCEBIAKIKBZGYJMKAXRAADYTTYAADMYCFGEZBBYGPGEPRPZOCDUJABEANMQFUUUSEHJLMOQPWXLVIMRKQQYXLVJOFHDGLDNNQGMMUQFWESWZEXERETATKCLMULFWETELNTOGRXCTKCLMMGZHIAPZCGPQUCAZKCRAICEINVNBFXMQFSIYAKRBALIXTOWVMKUCZIAAEWLFMROWIUCBFTFMRDTOAZQMDSOIUYAAGGFFQGENEWLLGATPSMNIAMGPQOOUAAMGFFQHEHBTMHDDMJLAEVEAMQNTEUKJQXDTQSOUPPCPQQFTRUOQBXADFWEZAIKHGLFIWVOCKFURBAAABWPFEJUTOUPPCKUBSTTOAMYLFCDCOUAQQMTCXPRNAARHRRTTSLLTYMRMDBSHJLRAQUQHTLNVMOMJEWAWALNEMRRDRTHQCLOJAHEAKBFXICEIEYJMLWADFWEYELEXFFQHEWHIRYAPYHAYAZCEMRUKESUNJTFYZSAYAASKDMGCDLZJWTEJAEEINMYDNCKDNKSPGVTRTTGBUWRYMJXHOMBARXQNXNTVPPCLGPDDUUZQLZMZKHSHHXJTULFWIZWXNXMPMCCLYPYKMAFTRPOMQAAPUOOUCCWHFYEPGBUWRTXRTDUNDBFXQJACGHPMBLTYBTIZQVJBWCFWAAKNKHERSJYVPAGGFFQGENEWLPTGOWHHRMMGQAUGCBHIPLGKYXTWHIRYAPYPTADMKTDEUCOMPPCIXYFUOYITGXFCDGAJAAUAUATPRLQXRHWGXDMLPZCLYGIXDLWVBNBRABEANMQYFFUVHHJLRAMRPXSJKVRBZSAJSSUASKDMGCDADMQNYKUIPSWBDHDKFWEMHIRLGPRPCLOWDMTCFTRYWKCLYYKQEMKZKXDDDXNNEVEKQCRHOUPPCXMQFTRUOCKFURBAAABWPFFFQGEHNMZNDGQSTLNZYVQQNTNLWBFMTCETDPIMLMOMHTRZALGFQLFAAFAZQVATQGASIWQMFFQTNAEZCLGKYXTVBPMKUXACGBUWRTZBODNZEARFMGZAYVBAYGPUUIHJHIWTZBEXLAIIIBZEGEATEVMKBYDIFLWBSKQQACTOAACWUKQCTLZACTRJADRHNMDEMRMGEHOPSFYMOZSYEXNEQQMCDZALGFQLFLACAAQXUQYXCANILLQAFHHHRMPXHCMAEKWZCEUCRDFHXWSMYCFGEZBBGGFFQJNKAZJRULSQAZAUCGFYZSTOAXPXECZREVBIAXZRDPLWAIIFMRQGIHHWZMMGZTDPJLPBXJODRLOQLVXSPTSJDIJDOFQGTOUIJHOJMHTPPMJBYCEIOUAWMSQYZSSHJLQMALQQAZWTRTZBOWEYPWSMOPAEIUOWKXBJMREZEVAXDRMXNHNMYLNMGADLNAYGPAAQBSAAAHHCDIHLOMYYXMAGFLNZMFMLSPNLOMAKGQFHCVRMPXJNAHEKNWADERTTSLWUMNZREWODOMTBPCZREVBZCIQYFTDTWAQYMGXJRLOQLVXSPXNNDCKFAAWNTLNZYBZQOPRWOILWEJGBPIHWADEUTXCOWZCHZYHTRHCMKXFPQHFAPPGVWJMCDZHQBBZEUHPYKJYUXWFGINCMPXPZKTAYPPONMIQHAMPMPMTCRPISQZCMTCXPNKOTGWQQQXTOAZQMMWODHLNMLMMLPSOUKBRKMTQAFHNJSMEMYTAKRILVQOGXCRHGYGPDMGTHHCQUXMOZSBLBMFQRDTSMPQLLUXQROCAZRAQQQPFSKWPTDMGCDOKZGSALSJYVPZCZUMZPLZABRBZEFWEDAARIMAUUIJKKCTZQQPFSKWPVALFPIUOUYGKEGNOAOWDFQQAOOPYIEXMKUALPKVWXMPEPGVPPYMPCHTLVLMBBZSZJSBWTJREFMALVSACTERTTSLWZCLGZYPRPJMKHGLFPIUOEFBOFMGEJDIPTORQGIZALZRMDXPTAKXYGPSEJASHGRAQNDTSLJKCHRAMGBVJIRXBJMIFVNUQMTYFGOZAIZHHCFWEZAIQNDDMREKQZGGSRTTMPZLJXOPQIAJAWSLOKUALPKVWXMPEPGVZCPBZEFWEZAKMGPUAGLKSIPBFUMHDPOKMOQPQSTOWBRAQQQPFSKWPHRRTTWLOBCKZNMRIMEKMVQYZLAZZWRMQBIXTOJCKXDMGHFSWBRHBNQSSLWUMNZREIHLOMUXDCBGOTLBJRUBQCTPBQCWMQEJNRAVGLXYZSSHPNGKERUIWHOJCEUCHTDADIRMTCKWAKOCLDNCXDWADMUTFCDXNADMNKQAMBBYEILHHCDBISHQMGKCMGSHCWZXRMDTTOAXPXECZREVBKPXFYOTOBOZCXRQACMHJGMYFFQBWHOVMMUAQSAIKCRHRRTTPHYQDBOQQPFSKWPBEAAKEYALUBFFMAMVOBYFUJXXOUOMYFASZISDDQJXFFQGEHNMQHYCPXFMAZCGOCEIOWNMQXZRPPYYAMDLKQFTMZXUYGKMRIHLOMQXMKAJNAOECKQDAGMLNTWTFMXASHHTRAQQQHTYQKRNDCEDRPCQLTXJKUOYIMBTETAACHJWCLULFWETAAMSAGODCLWVDKULSXNNNMCYEKMNHHRMBXHCXDPLZWLMTCHDLJWVMXEUTXCOPPCGNCOPMLXIPKUCDGELBAYLFFQKOSYILHESNHIKALYGPRGGNLZQLMAYZPTVHTRAQZMGRPAZPXQDEXNAQZLLGPDDUUZIJTSMACOYPQBTXDXPTADMAKGQFJNKAZLXMRTIHLOMQXMKAJNAOBCGPQFDSBXAGWQYEXTJKWJLMLPIHBOBFXUQXPNKOILWECMBOBJBQLULWROUPQLNQBEJBZELCGOCNPLHJKCWNWGEWHNLEKAUFWOMPPCKQCRHLLZBMMTCRDRTWBGHZMRIHPYSATDZACAAAXJTFDAGMZOWKXFGYTSCKTATZGOPCAEDGMKAACTPJCCWQTQCAMPMPMTCRDRTWBGHZMRIHLWBMEXMDPTVHTJBWCEIRBYBSKQYZSDBNQLZQNUHOKAAUAQPQIHLLTYMRMDBSYKACTNMHTSLWTCOQJQGOZEWLTXDQPTBNMQLGATPSJDILGQJEPNKXTSXTMXTSJZMTXXMBTDADMDHDKMIIVJWDFMLKHUJDACTYMGCTZDIQUQCZTXWHIGGQBNNTOAPMMENAITOAWPRMAODRKEVEMARTXSADMMKKYZPCAEDCOAJOPNVHQCLALMHPVPWDMTCXXTOKANAQPQWEHPMBYDMYQESKEYLFFQELHPMYUATQIHPOPMMENAIMVRMQMTCHDLJWVMBEKAKEKWEYRRPABTOAPCTFQAJRJAILWHMXRAUEKYVFGHXTFYMYLQQFWEOKBQIARIXLSPPCGTCMITOAIPXMMRIHLLTYMQLALAIKDCBFNDDDBYQLZMLAIHLNIAMUTQKOSYILHULFWIZSIWTOFMXNVBDMEOYZDEZPPYMSCFERVCZCLEGHTLFKTBXDYIPYMNWKMTCOJRYAVREKYOIICAWLXUQSTNLNIRXPUUIHZKUCXJAQETPKVQKMBUDMLPZGVPYFXNNKNRAQKUSPHYQDBOKAJNAWQLLTYENILHLCWQTUSEUYMMYMLQPSASIPWYMHTMLJBMYHMXRAUEAKPTGOWIZYWLLUQFTNASQRAFFQWOAOXMMFFQDRFDWUXHCDXNADMATECAUHVNQXHZEGNOARWJVMLUHMTWGFTHCYXGYWBCWEMGIHDAARPMPPLHPYPGLZMFTNAEZCEKAACSPOBCGFUUIHADMFHFQBDTADMMKKBIWEUEBDHDKQSHVNQXHZEGNOAIIWAMTQQELJTMVMRQSCSKACMAYEERLWLGGSAQCTLNKMFBMEXTPKVTHXAMCIJNWADEBDTDNALDKAKTDRPVWLZGWAIAYAWDUMQMATPYKMFBMEXTPKVYGPBQUIUAIRAAJQXIAEKQNURQPUNEBCEMZDPDVNQRXAJUKIUAXJTSGARLHOMYGPNKGOEAVCYAPYEHLJWAKKQFHWOETCIUEQDNPPMGLRMGCDPJBFXSPAJNKIIQLARTTRNQGMMEYZSSHIXJXEDDDMADMKBPNMRIMEKKHGLFPIUOPYOQQUBISWZAHYNAHIAEWLLFMFWEZANMNZBACHVNQXHZEGNOAOWKXHMXRAUEKPHOIEDCJQZGGFFQUOYIWDAKYXDCSWARBFCIWIJDKMGFYUCSWWTYZALUIEHJLQBPCDDMLHILXPPQSGLZDMEOYZXCYKKILMPQWEHRQJRMJFTRLZBFBEFMHGPRMLKUQQIOHJIJVUKQPUNEBCVMJOXTLYTYROJUCOWPQJHXGFTIKZQLZEGFTISIMLBFCXPBYWLMKURQBANJMRBFCUGOUKFGWQQMCDAWTAVMPNDNHPMQTDCRDUUZIQEUKQHTVJMYGPQUATZPWLXEMYTLPIMQMALQHWLNMDHDKQSBFHQTBZENTIUCAYMALQEOPJBGGFFQSRPHTAHDCOPRIKVYMQQITRLBWSGPKUMEKSQRAHMXRAUEKPHOIEERLOCKTNJKIHPOQQTBJMREDDMPXTWMAOJHIQMURQPCJQUSEMRQSAUZEYLDCIDRRALZRECMRUYNMLMERTTLPIMQMALQROUPIGGEDAHSPHAMYMJSPEINGMSAYZHEJDQLHUBEUOYWUGGUDQGAUOUMEXSERSHJLMLFPMROKOLGGADXPGLHTYMQQBDLSAVYGPQODLLYWBHZREPRLWTQHRMGCDZKUCEUKQHTVJMQAMTQQELJUMWUDUTDIUAGEUAUUIJWBGHZYZSPOKANAMRUHAAEWLVXGZDPAETMEURQEYYEBCKMBUDLHNQYGRMEHISOILWKCXAODCTYLEQTPRKOIPXRMGCDPJBFXAMLTAUZAMFQTAACHJQAKAAWHAUZUYGSYZTSLNWADEYDTCLIMLMQBNNIUZCPTFCPDOGANCKDMYPNNWVCLQYZSPOKANAAPUIEJNCQMEAAPTYKKILFFQHEMAZPHYYZVAUAACVDSEISJKVQBERAUIYKVMQUBQHAUZUYGSYZTSLKFGWQQMCDHNMPXXYFTDAKUYGSYZTSLJWBNXCEPNKIQEAFZQROTABYKSCFHFVNNSMGPQBIUEVEXRDAGTZKBFXDKMIEYEIJLRMGCDVJPMKUXACGBUWRTDCMCASYQKXNYDXTLYIJVURQRESWLMGURQRRPOBMUMJUIENHISVALUIENUXQNYGDDNZPWLXWYAAIUEBCFUAMBOUPUMKUJXDNPPMKNPQFDNLMCYKFXEPPYKXCEEKQRTPPMYGPXQDLPPMEXAJAVIJDQQMAPKWOYEHMGSSKDTPOIREQYEIOMWTZBMLOBISHQMGKCMGSHCWYZQYZSIZLMPAMNEPSTQKFTEKUALPKVWXMPEDLKNIBBAKQIRPYLYMULSWAZUQCEPCPPGLOWDFUJXXOUUMYKEYZSMVNMPXOCZILFKNKBXJUDNFAIPLFFUHMHUZCYXCOIEPPPCKBPAAOUCMBOA";
        ct = new String(CryptoTools.clean(ct.getBytes()));
        System.out.println("ct: " + ct);

        // Use IC values ot obtain key length
//        double[] icValues = MyTools.computeIC(ct, 50);
//        for (int i=0; i< icValues.length; i++) {
//            System.out.printf("%d %.2f\n", i, icValues[i]*100);
//        }
        System.out.println("The key length is 10");

        performExhaustiveAttack(ct, 10);
    }

    /**
     * perform exhaustive attack on the ciphertext
     *
     * @param ct        ciphertext
     * @param keyLength length of the key
     */
    private static void performExhaustiveAttack(String ct, int keyLength) {
        // split array then find transpose to do calculations
        String[] broken = splitArray(ct, keyLength);
        String[] brokenTranspose = transposeArray(broken);
        int[] shiftKeys = new int[brokenTranspose.length];

        // for each letter of key find best shift => dot product with eng vec
        for (int i = 0; i < brokenTranspose.length; i++) {
            int bestShift = exhaustShiftForMaxDotProduct(brokenTranspose[i]);
            shiftKeys[i] = bestShift;
        }

        // shift each letter of ct with specific key => pt = ct + key
        String pt = shiftWithKey(broken, shiftKeys);
        System.out.println("pt: " + pt);
    }

    /**
     * Exhaustively perform every shift to determine which one is best by comparing it with the dot product
     *
     * @param s ciphertext
     * @return best shift that corresponds to the max dot product
     */
    private static int exhaustShiftForMaxDotProduct(String s) {
        double maxDp = 0;
        int bestShift = 0;

        for (int shift = 1; shift < 26; shift++) {
            String shiftedCt = "";
            for (int i = 0; i < s.length(); i++) {
                shiftedCt += (char) (int) MyTools.shiftBy(s.charAt(i), shift, true);
            }

            double dp = normalizeAndComputeDotProduct(shiftedCt);
            if (maxDp < dp) {
                maxDp = dp;
                bestShift = shift;
            }
        }

        return bestShift;
    }

    /**
     * Shift 1st, 2nd, ..., nth char of array by various keys
     *
     * @param broken    array that needs shifting
     * @param shiftKeys values to be shifted by
     * @return pt
     */
    private static String shiftWithKey(String[] broken, int[] shiftKeys) {
        String rtn = "";
        for (int i = 0; i < broken.length; i++) {
            String decrypted = "";
            for (int j = 0; j < broken[i].length(); j++) {
                decrypted += (char) (int) MyTools.shiftBy(broken[i].charAt(j), shiftKeys[j], true);
            }

            rtn += decrypted;
        }

        return rtn;
    }

    /**
     * Transposes an array of Strings: 2x4 => 4x2
     *
     * @param broken array to be transposed
     * @return transposed array
     */
    private static String[] transposeArray(String[] broken) {
        String[] rtn = new String[broken[0].length()];
        for (int i = 0; i < rtn.length; i++) {
            rtn[i] = "";
            for (int j = 0; j < broken.length; j++) {
                if (i < broken[j].length())
                    rtn[i] += broken[j].charAt(i);
            }
        }

        return rtn;
    }

    /**
     * Split string into arrays
     *
     * @param ct          ciphertext
     * @param arrayLength number of array elements (ke
     * @return ct broken into array of strings with length {arrayLength}
     */
    private static String[] splitArray(String ct, int arrayLength) {
        int length = ct.length();
        // create extra array element in case ct.length doesn't divide equally by arrayLength
        String[] rtn = new String[length % arrayLength == 0 ? length / arrayLength : (length / arrayLength) + 1];

        for (int i = 0; i < length / arrayLength; i++) {
            rtn[i] = ct.substring(i * arrayLength, i * arrayLength + arrayLength);
        }

        if (length % arrayLength != 0) {
            rtn[rtn.length - 1] = ct.substring(length - (length % arrayLength));
        }

        return rtn;
    }

}
