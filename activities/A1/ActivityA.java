package A1;

import java.math.BigInteger;
import java.util.HashMap;

public class ActivityA {
    public static void main(String[] args) {

        String ct = "QEPYNAPPIMWJCHEPIWJNWKSWIJCHXCWPKEOCJCQOAKMTCWKWJCLFPCOCTGHWJSCPEAKMWFCSEPGKFEPORCWPIJSHEQJEJFNCJEPFNQCKFCPJRWNWOWKCWPTGKWFAPHWGCJPEAFCFEXTEPIHWKCWKFMEWKFOITTIEJKEXZCEZTCIJXTEPIHWWTEJSQIFNFNCKFWFCKQWTFHIKJCGQEPTHWJHAKZPCKIHCJFHEJWTHFPAOZKOWPWTWSEPCKEPFWPCIJFNCZEFCJFIWTMPEKKNWIPKEXFNCNAPPIMWJCXEPCMWKFCPKKWGHEPIWJQNIMNNWHFEZKAKFWIJCHQIJHKEXYONXPIHWGJISNFQITTFNPCWFCJFNCXTEPIHWZCJIJKATWTWFCOEJHWGEPCWPTGFACKHWGFNEKCOWLIOAOKAKFWIJCHQIJHKIJMPCWKCHFEYONRGKWFAPHWGOEPJIJSQIFNFNCKFEPOMCJFPCHWREAFYITEOCFPCKCWKFEXQCKFZWTORCWMNFNCJWFIEJWTNAPPIMWJCMCJFCPIJOIWOIMWAFIEJCHFNWFIFKOCFCEPETESIKFKPCOWIJAJMCPFWIJQNCFNCPHEPIWJQEATHOWYCWHCVWKFWFIJSHIPCMFKFPIYCEJFNCKFWFCKCWKFMEWKFEPIJXTIMFWSTWJMIJSRTEQKEOCEXFNCOEPCPCTIWRTCMEOZAFCPOEHCTKZPCHIMFCHWTWFCFAPJJEPFNQWPHFNWFQEATHNWVCHEPIWJNASFNCXTEPIHWMEWKFNEQCVCPFNCPIKYOWGRCIJMPCWKIJSCTKCQNCPCFNCNAPPIMWJCMCJFPCKWHVIKEPGPCTCWKCHWFWOCFEJKWFAPHWGQWPJCHFNCZEKKIRITIFGEXKFPEJSQIJHKWJHTIXCFNPCWFCJIJSKFEPOKAPSCIKIJMPCWKIJSWTEJSSCEPSIWWJHKEAFNMWPETIJWKMEWKFKFNCXWIJFNEZCEXHEHSIJSHEPIWJKXAPGMWOCXPIHWGCVCJWKFNCKFEPOPWFMNCFCHAZXPEOWOCJWMIJSMWFCSEPGNAPPIMWJCFEWJCVCJXAFAPCOEPCHWJSCPEAKMWFCSEPGFNWFPWIKCHXCWPKHEPIWJMEATHRCMEOCFNCOEKFZEQCPXATNAPPIMWJCFENIFXTEPIHWKCWKFMEWKFIJJCWPTGGCWPKJWFIEJWTNAPPIMWJCMCJFCPZPEDCMFIEJKKNEQCHHEPIWJNIFFIJSPEASNTGJCWPXEPFZICPMCXTWKEOCYITEOCFPCKJEPFNEXOWPWTWSEFNCJPAJJIJSWTEJSFNCMEWKFTIJCWKIFOEVCKJEPFNRAFXEPCMWKFCPKMWAFIEJCHFNWFFNCKFEPOKFPWMYPCOWIJKKFITTNISNTGAJMCPFWIJWJHCVCJWKOWTTHCVIWFIEJMEATHZAFHEPIWJEXXKNEPCEPQCTTIJTWJHTEEYIJSWFFNCKCXEPCMWKFKWRAOZIJEJCHIPCMFIEJEPFNCEFNCPMEATHNWVCPCWTTGKISJIXIMWJFPWOIXIMWFIEJKIJFCPOKEXIOZWMFXTEPIHWSEVPEJHCKWJFIKFETHPCZEPFCPKKWFAPHWGOEPJIJSIXIFRAOZKXAPFNCPCWKFFNWFERVIEAKTGIKZEKIFIVCIXIFRAOZKDAKFWTIFFTCQCKFFNWJGEAPCTEEYIJSWFPCWTTGPCWTTGKISJIXIMWJFIOZWMFKHEJFOWYCWJGWKKAOZFIEJKPCOWIJVISITWJFWJHRCZPCZWPCHNCKWIHFPAOZNWKHCMTWPCHWKFWFCEXCOCPSCJMGIJXTEPIHWWJHWAFNEPIBCHFNCXCHCPWTCOCPSCJMGOWJWSCOCJFWSCJMGFEMEEPHIJWFCHIKWKFCPPCTICXCXXEPFKNCFETHPCZEPFCPKFNWFOWPWTWSEMWJNWJHTCIFKCTXWJHFNWFNCIKOEPCQEPPICHWREAFXTEPIHWFNIKIKRISWJHIKSPEQIJSWJHIFKFITTNWKKEOCFIOCFESCFQEPKCDATIEVWKUACBKWIHWFWOIWOIXWKFXEEHDEIJFJCLFFEWSWKKFWFIEJFNWFNWHPAJEAFEXXACTJEEJCYJEQKQNWFMWJPCWTTGNWZZCJFNIKIKKCPIEAKKEOCFIOCKIXGEACVWMAWFCFEEKEEJGEAOWGCVWMAWFCIJFEFNCZWFNEXFNCKFEPOIXIFMNWJSCKHCKWJFIKKWIHEJXPIHWGRAFKEOCMEAJFICKWJJEAJMCHOWJHWFEPGCVWMAWFIEJKWNCWHEXFIOCEJXPIHWGRPCVWPHMEAJFGWJHOWPFIJMEAJFGEXXIMIWTKWJJEAJMCHPCKIHCJFKEXRWPPICPIKTWJHKOERITCNEOCKWJHTEQTGIJSWPCWKQEATHRCAJHCPWOWJHWFEPGCVWMAWFIEJEPHCPRCSIJJIJSKAJHWGOEPJIJSFNCRPCVWPHMEAJFGEPHCPIJMTAHCKFNCYCJJCHGKZWMCMCJFCPIJHIWJPIVCPMEAJFGEXXIMIWTKKWIHFNCGQITTPCMEOOCJHPCKIHCJFKEXIFKRWPPICPIKTWJHVETAJFWPITGCVWMAWFCEJMCNAPPIMWJCQWPJIJSKWPCIKKACHNEOCEQJCPKWJHRAKIJCKKCKPAKNCHFEMEVCPFNCIPQIJHEQKQIFNZTGQEEHKAZCPOWPYCFKPWJEAFEXREFFTCHQWFCPWJHTEJSTIJCKXEPOCHWFSWKKFWFIEJKQIFNKEOCXACTKNEPFWSCKPCZEPFCHWFWZARTILKAZCPOWPYCFIJMEMEWRCWMNCHMICMIPKYIEXFNCMAKFEOCPKCPVIMCHCZWPFOCJFKWIHFNCZNWPOWMGQWKCLFPWRAKGQIFNZCEZTCPAKNIJSFEXITTZPCKMPIZFIEJKFNCSPEMCPGQWKPWFIEJIJSREFFTCHQWFCPWJHNWHPAJEAFEXHPGIMCIFKNWIPGNCKWIHNAPPIMWJCHEPIWJSPEQKFECLFPCOCTGHWJSCPEAKMWFCSEPGWKXTEPIHWRPWMCKXEPWPPIVWTXTEPIHWPCKIHCJFKXACTAZCOZFGKFEPCKNCTVCKWNCWHEXNAPPIMWJCHEPIWJCWPTGKWFAPHWGHEPIWJQWKOEVIJSJEPFNQCKFWFYONXEPCMWKFCPKQWPJCHFNWFIFKKTEQOEVCOCJFOCWJKXTEPIHWMEATHXWMCWZPETEJSCHQWTTEZEXQIJHKFEPOKAPSCWJHFEPPCJFIWTPWIJMEWKFWTWPCWKMEATHSCFFEOITTIOCFPCKEXPWIJQIFNOITTIOCFPCKIJKEOCZTWMCKFPISSCPIJSTIXCFNPCWFCJIJSXTWKNXTEEHKFNCNAPPIMWJCMCJFPCKWIHWTKEIOZCPITTCHQCPCFNCRWNWOWKQNCPCMWJJCHXEEHWJHREFFTCHQWFCPQCPCHIKWZZCWPIJSUAIMYTGXPEOKNCTVCKWJHFNCKEAJHEXNWOOCPIJSCMNECHWMPEKKFNCIKTWJHKWKZCEZTCREWPHCHAZFNCIPNEOCKHEPIWJQWKCLZCMFCHFENIFFNCJEPFNQCKFCPJZWPFEXFNCRWNWOWKRGKAJHWGQIFNFNCZEFCJFIWTXEPTIXCFNPCWFCJIJSKFEPOKAPSCFNWFMEATHPWIKCQWFCPTCVCTKOCFPCKWREVCJEPOWTHEJEFRCXEETIKNWJHFPGFERPWVCEAFFNIKNAPPIMWJCZPIOCOIJIKFCPNARCPFOIJJIKKWIHFNCZPIMCGEAOWGZWGXEPJEFCVWMAWFIJSIKGEAPTIXCMRMKDEAPJWTIKFIMKFWJHWPHKWJHZPWMFIMCKWREAFMRMJCQKFCTT";
        System.out.println(ct);

        displayFrequencies(ct);

        //a[0] from CT maps to a[1] in PT
        char[] a1 = {'C', 'E'};
        char[] a2 = {'F', 'T'};

        int[] alphaBeta = getAlphaBeta(a1, a2);

        checkAlphaBeta(alphaBeta);
        decryptText(ct, alphaBeta);

        System.out.printf("alpha: %d\t beta: %d\n", alphaBeta[0], alphaBeta[1]);
    }

    /**
     * Uses an alpha-beta pair to decrypt a given CT
     * @param ct ciphertext
     * @param alphaBeta array containing alpha-beta pair
     */
    private static void decryptText(String ct, int[] alphaBeta) {
        int alpha = alphaBeta[0];
        int beta = alphaBeta[1];
        for (Character c : ct.toCharArray()) {
            int a = (getNumeric(c) - beta) * modularInverse(alpha);
            a = Math.floorMod(a, 26);
            System.out.print(getAlphabetic(a));
        }
        System.out.println();
    }

    /**
     * Checks the validity of a alpha-beta pair by comparing frequencies of the 3 most appearing letters and 3 least appearing letters in the english alphabet
     * @param alphaBeta
     */
    private static void checkAlphaBeta(int[] alphaBeta) {
        int alpha = alphaBeta[0];
        int beta = alphaBeta[1];

        char[] testingChars = {'T', 'A', 'O', 'Z', 'Q', 'X'};

        for (char c : testingChars) {
            int encrypted = (alpha * getNumeric(c) + beta) % 26;
            System.out.printf("%c  encrypted to %c\n", c, (char) (encrypted + 65));
        }

    }

    /**
     * Takes two possible CT-PT pairs to solve an equation for alpha and beta
     * @param a1 CT-PT pair 1
     * @param a2 CT-PT pair 2
     * @return int[alpha beta]
     */
    private static int[] getAlphaBeta(char[] a1, char[] a2) {
        int[] n1 = {getNumeric(a1[0]), getNumeric(a1[1])};
        int[] n2 = {getNumeric(a2[0]), getNumeric(a2[1])};
        
        if (n1[1] < n2[1]) {
            int[] temp = n1;
            n1 = n2;
            n2 = temp;
        }

        int deltaP = n1[1] - n2[1];

        int deltaC = n1[0] - n2[0];
        deltaC = Math.floorMod(deltaC, 26);

        int deltaPInverse = modularInverse(deltaP);
        int alpha = (deltaC * deltaPInverse) % 26;

        System.out.printf("deltaC: %d\t deltaP: %d\t alpha: %d\n", deltaC, deltaP, alpha);

        int beta = Math.floorMod(n1[0] - (alpha * n1[1]), 26);
        System.out.println("beta: " + beta);

        return new int[] {alpha, beta};
    }

    /**
     * Modular inverse of a number
     * @param i int to be converted
     * @return mod 26 of a number
     */
    private static int modularInverse(int i) {
        BigInteger bi1 = new BigInteger(String.valueOf(i));
        BigInteger bi2 = new BigInteger("26");
        return Integer.valueOf(bi1.modInverse(bi2).toString());
    }

    /**
     * Returns char representation of an int
     * @param i int to be converted
     * @return A <= char <= Z
     */
    public static char getAlphabetic(int i) {
        return (char) (i+65);
    }

    /**
     * Returns numeric representation of a give char
     * @param c char to be converted
     * @return 0 <= int <= 25
     */
    private static int getNumeric(char c) {
        return  (int) (c-65);
    }


    // c: 10.8 --> e
    // w: 9.6 --> t
    // f: 8.5 --> a, o, n, i

    /**
     * This methoid displays frequencies within the given CT
     * @param ct ciphertext
     */
    private static void displayFrequencies(String ct) {
        HashMap<Character, Integer> charMap = new HashMap<>();
        for (Character c : ct.toCharArray()){
            if (charMap.keySet().contains(c)) {
                charMap.put(c, charMap.get(c)+1);
            } else {
                charMap.put(c, 0);
            }
        }

        int i=0;
        for (Character c: charMap.keySet()) {
            System.out.printf("%d:%c --> %2.3f\n", i, c, charMap.get(c) * 100.0 / ct.length());
            i++;
        }
    }
}
